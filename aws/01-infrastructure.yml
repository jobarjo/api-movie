---
AWSTemplateFormatVersion: '2010-09-09'
Description: A stack for deploying containerized applications onto a cluster of EC2 hosts using Elastic Container Service. This stack runs containers on hosts that are in a public VPC subnet, and includes a public facing load balancer to register the services in.

Parameters:
  ProjectName:
    Type: String
  BranchName:
    Type: String
    Description: "The dev / deployment environment" 
    AllowedValues:
      - "dev"
      - "uat"
      - "master"
  AWSELBId:
    Type: String
    Description: "AWS account IDs to use in place of elb-account-id in the S3 bucket policy for ELB logs. The id is region-dependent and the default id is for the region eu-west-1."
    Default: "156460612806"
  NetworkingStackName:
    Type: String
    Description: "Name of the CF stack associated with the instrastrure codepipeline step within the be-awsInfra-networking project"
  WantedCertificateArn:
    Type: String
    Description: "ARN of the www.wanted.com certificate imported into AWS       Certificate Manager" 
    Default: "arn:aws:acm:eu-west-1:073919355633:certificate/98f46434-d507-4049-9f46-03c001191b50"
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of EC2 instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '1'
    Description: Maximum number of EC2 instances that can be launched in the ECS cluster.
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    ConstraintDescription: Please choose a valid instance type.

Resources:
  ECRRepository:
    Type: AWS::ECR::Repository
    # Properties:
      # LifecyclePolicy: TBD
      ## check: https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html

  ECSCluster:
    Type: AWS::ECS::Cluster

  # A security group for the EC2 hosts that will run the containers.
  # Two rules, allowing network traffic from a public facing load balancer
  # and from other hosts in the security group.
  #
  # If you want to make direct requests to a container using its
  # public IP address you'll need to add a security group rule
  # to allow traffic from all IP addresses.
  EcsHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS hosts that run containers
      VpcId:
        Fn::ImportValue:
          !Sub "${NetworkingStackName}:VPCId"
  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref 'EcsHostSecurityGroup'
      SourceSecurityGroupId: !Ref 'PublicLoadBalancerSG'
      IpProtocol: "-1"
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other hosts in the same security group
      GroupId: !Ref 'EcsHostSecurityGroup'
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref 'EcsHostSecurityGroup'

  # Autoscaling group. This launches the actual EC2 instances that will register
  # themselves as members of the cluster, and run the docker containers.
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${NetworkingStackName}:PublicSubnetOne"
        - Fn::ImportValue:
            !Sub "${NetworkingStackName}:PublicSubnetTwo"
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: '1'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true

  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref 'ECSAMI'
      SecurityGroups: 
        - !Ref 'EcsHostSecurityGroup'
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      UserData:
        # will add instance to cluster
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'application-autoscaling:*'
              - 'cloudwatch:DescribeAlarms'
              - 'cloudwatch:PutMetricAlarm'
              - 'ecs:DescribeServices'
              - 'ecs:UpdateService'
            Resource: '*'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: 
        - !Ref 'EC2Role'

  # Role for the EC2 hosts. This allows the ECS agent on the EC2 hosts
  # to communciate with the ECS control plane, as well as download the docker
  # images from ECR to run on your host.
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ecs:CreateCluster'
              - 'ecs:DeregisterContainerInstance'
              - 'ecs:DiscoverPollEndpoint'
              - 'ecs:Poll'
              - 'ecs:RegisterContainerInstance'
              - 'ecs:StartTelemetrySession'
              - 'ecs:Submit*'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchGetImage'
              - 'ecr:GetDownloadUrlForLayer'
            Resource: '*'

  ## LOAD BALANCER
  #
  # - One public load balancer, hosted in public subnets that is accessible
  #   to the public, and is intended to route traffic to one or more public
  #   facing services.
  PublicLoadBalancer:
    DependsOn:
     - "ContentBucketPolicy"
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      - Key: access_logs.s3.enabled
        Value: "true"
      - Key: access_logs.s3.bucket
        Value: !Ref S3LogsBucket
      Subnets:
        - Fn::ImportValue:
            !Sub "${NetworkingStackName}:PublicSubnetOne"
        - Fn::ImportValue:
            !Sub "${NetworkingStackName}:PublicSubnetTwo"
      SecurityGroups: 
        - !Ref 'PublicLoadBalancerSG'
  
  # A dummy target group is used to setup the ALB to just drop traffic
  # initially, before any real service target groups have been added.
  DummyTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Sub "${NetworkingStackName}:VPCId"
  
  PublicLoadBalancerHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'DummyTargetGroupPublic'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 80
      Protocol: HTTP
  
  PublicLoadBalancerHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref WantedCertificateArn
      DefaultActions:
        - TargetGroupArn: !Ref 'DummyTargetGroupPublic'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 443
      Protocol: HTTPS

  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: 
        Fn::ImportValue:
          !Sub "${NetworkingStackName}:VPCId"
      SecurityGroupIngress:
        - Description: "Allow access to ALB from anywhere on the internet"
          CidrIp: 0.0.0.0/0
          IpProtocol: "-1"

  # S3 bucket for the ELB logs
  S3LogsBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration: 
        Rules:
          - Id: ExpirationInDaysRule
            ExpirationInDays: 30
            Status: Enabled
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: true
        BlockPublicPolicy: true 
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # Bucket policy for the ELB S3 log bucket
  ContentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3LogsBucket
      PolicyDocument:
        Statement:
          - Sid: AllowRootAccess
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWSELBId}:root'
            Action: s3:PutObject
            Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3LogsBucket
                  - "/*"
          - Sid: AllowLogWriting
            Effect: Allow
            Principal:
              Service: "delivery.logs.amazonaws.com"
            Action: s3:PutObject
            Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3LogsBucket
                  - "/*"
            Condition:
              StringEquals:
                s3:x-amz-acl:
                  - bucket-owner-full-control
          - Sid: AllowLogDelivery
            Effect: Allow
            Principal:
              Service: "delivery.logs.amazonaws.com"
            Action: s3:GetBucketAcl
            Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3LogsBucket

  # This is an IAM role which authorizes ECS to manage resources on the
  # account, such as updating the load balancer with the details of where
  # the containers are, so that traffic can reach them
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:AuthorizeSecurityGroupIngress'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'
              # Rules which allow ECS to update load balancers on your behalf with the information sabout how to send traffic to your containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'

Outputs:
  ECRRepositoryName:
    Description: "Name of the ECR repo"
    Value: !Ref ECRRepository
    Export:
      Name: !Sub ${ProjectName}-ECRRepositoryName-${BranchName}
  ECSClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Sub "${AWS::StackName}:ClusterName"
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !GetAtt 'PublicLoadBalancer.DNSName'
    Export:
      Name: !Sub "${AWS::StackName}:ExternalUrl"
  ECSRoleArn:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSRole.Arn'
    Export:
      Name: !Sub "${AWS::StackName}:ECSRole"
  PublicLoadBalancerHTTPListener:
    Description: The ARN of the public load balancer's HTTP Listener
    Value: !Ref PublicLoadBalancerHTTPListener
    Export:
      Name: !Sub "${AWS::StackName}:PublicLoadBalancerHTTPListener"
  PublicLoadBalancerHTTPSListener:
    Description: The ARN of the public load balancer's HTTPS Listener
    Value: !Ref 'PublicLoadBalancerHTTPSListener'
    Export:
      Name: !Sub "${AWS::StackName}:PublicLoadBalancerHTTPSListener"
