---
AWSTemplateFormatVersion: '2010-09-09'
Description: "Movie API"

Parameters:
  ProjectName:
    Type: String
  BranchName:
    Type: String
  ECRRepositoryName:
    Type: String
    Description: "ECR repository where to push the docker image"

Mappings:
  BranchName:
    dev:
      ServiceDesiredCount: 1
      TaskCpuUnits: 256
      TaskReservedMemory: 256
    uat:
      ServiceDesiredCount: 1
      TaskCpuUnits: 256
      TaskReservedMemory: 256
    prod:
      ServiceDesiredCount: 2
      TaskCpuUnits: 1024
      TaskReservedMemory: 1024

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      Tags:
        - Key: CreatedBy
          Value: joelbarenco
        - Key: Environment
          Value: !Ref BranchName
        - Key: Name
          Value: !Sub ${ProjectName}-ecsCluster-${BranchName}
        - Key: Product
          Value: tbd
        - Key: Project
          Value: !Sub ${ProjectName}
        - Key: Repo
          Value: https://github.com/wantedmedia/movieapi

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: !FindInMap [ BranchName, !Ref BranchName, ServiceDesiredCount ]
      LaunchType: EC2
      SchedulingStrategy: REPLICA
      Tags:
        - Key: CreatedBy
          Value: joelbarenco
        - Key: Environment
          Value: !Ref BranchName
        - Key: Name
          Value: !Sub ${ProjectName}-ecsService-${BranchName}
        - Key: Product
          Value: tbd
        - Key: Project
          Value: !Sub ${ProjectName}
        - Key: Repo
          Value: https://github.com/wantedmedia/movieapi

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt ECSTaskRole.Arn
      Family: !Sub "${ProjectName}-${BranchName}"
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: !Ref ProjectName
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryName}:latest"
          Memory: !FindInMap [ BranchName, !Ref BranchName, TaskReservedMemory ]
          Cpu: !FindInMap [ BranchName, !Ref BranchName, TaskCpuUnits ]
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: DEV_ENV
              Value: !Ref BranchName
            - Name: SERVER_NAME
              Value: !Ref ProjectName
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
      Tags:
        - Key: CreatedBy
          Value: joelbarenco
        - Key: Environment
          Value: !Ref BranchName
        - Key: Name
          Value: !Sub ${ProjectName}-ecsTask-${BranchName}
        - Key: Product
          Value: tbd
        - Key: Project
          Value: !Sub ${ProjectName}
        - Key: Repo
          Value: https://github.com/wantedmedia/movieapi

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ecs/${ProjectName}-${BranchName}
      RetentionInDays: 7

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: CreatedBy
          Value: joelbarenco
        - Key: Environment
          Value: !Ref BranchName
        - Key: Name
          Value: !Sub ${ProjectName}-ecsTaskRole-${BranchName}
        - Key: Product
          Value: tbd
        - Key: Project
          Value: !Sub ${ProjectName}
        - Key: Repo
          Value: https://github.com/wantedmedia/movieapi